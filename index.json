{"blog":[{"Aliases":null,"Content":"I\u0026rsquo;ve built a Hugo theme, yBlog, for my personal blog. Here are some take-aways.\nMental model As a content writer, we write contents in markdown, put them in correct folders, add some meta-data in front matter, and that\u0026rsquo;s it. Hugo takes care of everything else for us. But if we want to build our own themes, we need to understand a bit more about how Hugo works behind the scenes. The below diagram shows my mental model when I use Hugo:\nThis is perhaps an over-simplified version of Hugo\u0026rsquo;s work flow. If you look at Hugo\u0026rsquo;s source code, you\u0026rsquo;ll find the actual implementation much more complicated. But I find this mental model helpful for getting us thinking in Hugo.\nTo summarise Hugo\u0026rsquo;s model in one sentence: everything is a page, and every page has a corresponding model that provides all the information needed to render it. This model is really the central piece of Hugo\u0026rsquo;s flow. Everything you write will become its fields, and everything you see on the rendered pages are retrieved from it. You provide data to the model by writing markdown (including front matter), and you retrieve data in the templates by accessing the model\u0026rsquo;s fields and methods. Unfortunately, you won\u0026rsquo;t be able to find this \u0026ldquo;model\u0026rdquo; in any documentation, because it only exists in our mental model, the real implementation is much more sophisticated. You can refer to variables in hugo, they are corresponding to the model \u0026ldquo;fields\u0026rdquo; that we are talking about here.\nSo, let\u0026rsquo;s have a closer look at the data flow around this model, it can be separated into three steps (as shown in the diagram above):\n  Hugo parses the markdown contents and the front matter, as well as the config file, gathering information into models (providing information)\n  Models are mapped to corresponding templates (grouping information)\n  Templates consume the information carried in the models, rendering them in HTML (rendering information)\n  Providing information Information is the raw material for building the website. They come from 3 sources: the content markdown files, the config.toml/yaml/json file, and the Hugo engine.\nInformation from contents The most notable piece of information is the markdown content itself. This content will be available as a page variable, and can be retrieved using .Content in the page template (will explain shortly).\nWe are also able to provide other information that is specific to a particular page. These are added as front matter at the top of the content file. Some fields are predefined by Hugo, including title, description and so on. When they are defined in the front matter, they are available for use in templates via their names (eg .Title, .Description, \u0026hellip;).\nOther than these predefined fields, we can also add whatever information we want to front matter. These user-defined fields will also be available in the page template. They are grouped together in the .Params field. For example, if we add a note field to front matter, as this is not Hugo predefiend, we can later use it via .Params.Note in the templates.\nInformation from config We\u0026rsquo;ll also need some information that are website-wise, for example, the base URL of the website, the website\u0026rsquo;s author, etc. They belong to the config.toml file. When you provide these fields in the config file, they become available via the .Site template variable. For example, baseURL = 'https://my.domain' in config.toml becomes .Site.BaseURL in the templates.\nInformation from Hugo engine During the building process, Hugo also adds a great amount of helpful information for us to use in templates. These include .Permalink, .TableOfContents, .WordCount, .ReadingTime and many more. Refer to the documentation of page variables and site variables to see what else are available.\nGrouping information The information gathered from the above step will be grouped into models and dispatched to templates. Basically, the templates come in two versions (Kinds, in Hugo\u0026rsquo;s term): single page templates and list templates.\nSingle page templates display individual contents. For example, a single markdown file that you put under the contents folder will be forwarded to a single page template.\nList templates don\u0026rsquo;t display the content of an individual content file; they are used to provide a summary page of a certain collection. For example, section, taxonomy, etc. For example, the blogs page of the example site of my theme is rendered by a list template. That said, you CAN create a file corresponding to a particular list template; this way, you can provide front matter to the model of a list page. see here\nBy default, you should see these three default template files under the layouts/_default folder:\n_default/\r|- single.html\r|- list.html\r`- baseof.html\rsingle.html is the default single page template. Your individual content pages will be rendered by this template. list.html is the default list template, you can use it to display the summary of a section. Obviously, Hugo supports many other types of templates, but those are basically special cases of either single page template or list page template. You can read more about Hugo\u0026rsquo;s template lookup order here.\nNote here baseof.html is the base of all other templates. You can add the elements common to all pages here, like the head part of html. Other templates can be embedded inside this one. We\u0026rsquo;ll explain more of template structuring in the next section.\nRendering information Finally, the models go to corresponding templates, and we can retrieve the information we provided earlier in the contents and config file. To retrieve a field in model and insert it into the template, put it inside a pair of mustache symbol: {{ }}. For example, \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; in the template will be rendered as \u0026lt;h1\u0026gt;[value of the model's 'title' field]\u0026lt;/h1\u0026gt; in the final output. Hugo uses Go\u0026rsquo;s templating language, which is very powerful and interesting to work with. You can read about it in Hugo\u0026rsquo;s documentation.\nHugo\u0026rsquo;s templates can be embedded and make use of partials to reuse components. To show an example, here is the baseof.html of my theme:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html class=\u0026#34;sticky\u0026#34; id=\u0026#34;root\u0026#34;\u0026gt; {{- partial \u0026#34;head.html\u0026#34; . -}} \u0026lt;body\u0026gt; {{- partial \u0026#34;header.html\u0026#34; . -}} \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; {{- block \u0026#34;main\u0026#34; . }}{{- end }} \u0026lt;/div\u0026gt; {{- partial \u0026#34;footer.html\u0026#34; . -}} {{- partial \u0026#34;script.html\u0026#34; . -}} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The {{- block \u0026quot;main\u0026quot; . }}{{- end }} part shows how to use blocks to define the outer shell of a template. My _default/single.html is defined as:\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;!-- content of a single page --\u0026gt; {{ end }} The content of the single page template will be embedded into baseof.html template in the block \u0026quot;main\u0026quot; . part. The dot (.) after \u0026quot;main\u0026quot; is the context passed to embedded templates (similar to function argument, but each template only has one context). You can read more about base template and blocks here\nThe {{- partial \u0026quot;script.html\u0026quot; . -}} part shows how to use partial templates. I have created a script.html template under the partials folder with the following content:\n{{ $script := resources.Get \u0026#34;/js/script.js\u0026#34; | minify }} \u0026lt;script src=\u0026#34;{{ $script.RelPermalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; This piece will be inserted into the partial \u0026quot;script.html .\u0026quot; part. This way, we can decouple parts of a template and improve maintainability.\nYou can read more about partial templates here.\nWrap up Right, that\u0026rsquo;s it. This article is not a step-by-step toturial but aims to provide a high level overview of how Hugo works. There are a lot of details I cannot cover here, but it summarises what I learned so far, and hopefully it will be useful when I leave Hugo for some time and come back one day. For detailed information on Hugo, go to the documentation, and they also have a good tutorial to get you started.\n","FormattedDate":"Apr 10, 2021","FuzzyWordCount":1300,"GitInfo":{"hash":"b01cbcd4ad2a36636d231e9141a80b061fee9c12","abbreviatedHash":"b01cbcd","subject":"Some edits","authorName":"Yihao","authorEmail":"yesiamyihao@gmail.com","authorDate":"2021-04-27T23:06:31+12:00","commitDate":"2021-04-27T23:06:31+12:00"},"Kind":"page","Lastmod":"2021-04-27T23:06:31+12:00","Len":11484,"Name":"Building a Hugo Theme","Parameters":{"date":"2021-04-10T10:04:02+12:00","draft":false,"featured":false,"iscjklanguage":false,"lastmod":"2021-04-27T23:06:31+12:00","publishdate":"2021-04-10T10:04:02+12:00","tags":["hugo","go","theme"],"title":"Building a Hugo Theme"},"Permalink":"https://coderyihaowang.github.io/building-a-hugo-theme/","PublishDate":"2021-04-10T10:04:02+12:00","ReadingTime":6,"RelPermalink":"/building-a-hugo-theme/","Section":"blog","Title":"Building a Hugo Theme","Type":"blog","Weight":0,"WordCount":1274},{"Aliases":null,"Content":"Quick Start Here are some frequently used commands to get you started:\n\u0026gt; ls golang # list all articles with the `golang` tag \u0026gt; find golang # find all articles with `golang` in the title or content \u0026gt; cd blog # go to the `Blog` page \u0026gt; dark # toggle dark mode \u0026gt; toc # toggle the display of table of contents \u0026gt; exit # exit command pallete mode Detailed Usages \u0026gt; help Display the usage of a certain command.\nUsage:\n\u0026gt; help [command] # Display the usage of a certain command Examples:\n\u0026gt; help # Display this help page \u0026gt; help find # Display the usage of `find` command \u0026gt; cd Go to a page.\nUsage:\n\u0026gt; cd \u0026lt;page\u0026gt; # Go to a particular page Examples:\n\u0026gt; cd blog # Go to the `Blog` page \u0026gt; cd ~ # Go to home page \u0026gt; cd some-article # Go to the blog with the title `Some Article` \u0026gt; ls List all articles with a particular tag.\nUsage:\n\u0026gt; ls [tag] # List all articles with a particular tag Examples:\n\u0026gt; ls # Go to the tags listing page (equivalent to `cd tags`) \u0026gt; ls golang # List all ariticles with the tag `golang` \u0026gt; find Search articles.\nUsage:\n\u0026gt; find [--title] [-t] [--content] [-c] [--date] [-d] [--featured] [-f] [--regex] [-r] [searchQuery] # List all articles that contains the `searchQuery` argument # When --title or -t is presenet, search in title; # When --content or -c is present, search in content; # When --date or -d is present, search in date. # The above three arguments can be used in combination, # When none of the three is present, the search is done in title, content AND date # When --featured or -f is present, only show the articles with # `featured` parameter set to `true` # When --regex or -r is present, the `searchQuery` argument is # treated as a regular expression # When the `searchQuery` argument is not given, it matches any article # The `seatchQuery` argument can be multiple words, the order is preserved Examples:\n# Find all articles that contain the key word `golang` in title, content or date \u0026gt; find golang # Find articles that contains `golang` only in title \u0026gt; find golang --title \u0026gt; find --title golang # same as above \u0026gt; find -t golang # same as above # Find articles that contains `2021` in content or title, but don\u0026#39;t search in date \u0026gt; find 2021 --title --content \u0026gt; find 2021 -t -c # same as above \u0026gt; find 2021 -tc # same as above # Find articles whose title starts with `JavaScript` or `TypeScript` \u0026gt; find ^(Java|Type)Script --regex --title \u0026gt; find -tr ^(Java|Type)Script # same as above # Find articles that contain `command line` in the content \u0026gt; find -c command line # Find all featured articles \u0026gt; find --featured \u0026gt; find -f # Find all articles (equivalent to `cd blog`) \u0026gt; find \u0026gt; exit Exit command pallete mode and unpin the top bar.\nUsage:\n\u0026gt; exit \u0026gt; pin Pin the top bar.\nUsage:\n\u0026gt; pin \u0026gt; unpin Unpin the top bar and exit command pallete mode, equivalent to exit\nUsage:\n\u0026gt; unpin \u0026gt; dark Set dark mode.\nUsage:\n\u0026gt; dark [on|off] # Set or toggle dark mode Examples:\n\u0026gt; dark # Toggle dark mode \u0026gt; dark on # Turn on dark mode \u0026gt; dark off # Turn off dark mode \u0026gt; toc Set the display of table of contents.\nNote: Table of contents can only be displayed for articles (not home page or projects)\nUsage:\n\u0026gt; toc [on|off] # Set or toggle the display of table on contents Examples:\n\u0026gt; toc # Toggle the display oftable of contents \u0026gt; toc on # Turn on table of contents \u0026gt; toc off # Turn off table of contents \u0026gt; json Retrieve the JSON representation of this blog site.\nUsage:\n\u0026gt; json ","FormattedDate":"Apr 4, 2021","FuzzyWordCount":700,"GitInfo":{"hash":"13cb6612fd329d602e5ed30749048a2318603042","abbreviatedHash":"13cb661","subject":"Remove placeholder blogs; move articles into subfolder","authorName":"Yihao","authorEmail":"yesiamyihao@gmail.com","authorDate":"2021-04-26T16:33:25+12:00","commitDate":"2021-04-26T16:33:25+12:00"},"Kind":"page","Lastmod":"2021-04-26T16:33:25+12:00","Len":8784,"Name":"Command Pallete Reference Manual","Parameters":{"date":"2021-04-04T13:49:07+12:00","draft":false,"featured":false,"iscjklanguage":false,"lastmod":"2021-04-26T16:33:25+12:00","publishdate":"2021-04-04T13:49:07+12:00","tags":[],"title":"Command Pallete Reference Manual"},"Permalink":"https://coderyihaowang.github.io/help/","PublishDate":"2021-04-04T13:49:07+12:00","ReadingTime":4,"RelPermalink":"/help/","Section":"blog","Title":"Command Pallete Reference Manual","Type":"blog","Weight":0,"WordCount":647},{"Aliases":null,"Content":"ahdfahfkah kjhdfaj j ajfhadhf ia hak hafkahf k hakfhaufha khak hakfhka afahfak kah ahfakfhakhfahfakdhfak s sfkahfa kh ka fkadfh akhfafkak k\n aaa bbb ccc  ","FormattedDate":"Mar 28, 2021","FuzzyWordCount":100,"GitInfo":{"hash":"13cb6612fd329d602e5ed30749048a2318603042","abbreviatedHash":"13cb661","subject":"Remove placeholder blogs; move articles into subfolder","authorName":"Yihao","authorEmail":"yesiamyihao@gmail.com","authorDate":"2021-04-26T16:33:25+12:00","commitDate":"2021-04-26T16:33:25+12:00"},"Kind":"page","Lastmod":"2021-04-26T16:33:25+12:00","Len":198,"Name":"Projects","Parameters":{"date":"2021-03-28T15:14:56+13:00","draft":false,"iscjklanguage":false,"lastmod":"2021-04-26T16:33:25+12:00","publishdate":"2021-03-28T15:14:56+13:00","title":"Projects"},"Permalink":"https://coderyihaowang.github.io/projects/","PublishDate":"2021-03-28T15:14:56+13:00","ReadingTime":1,"RelPermalink":"/projects/","Section":"blog","Title":"Projects","Type":"blog","Weight":0,"WordCount":24}],"hugo":{"BuildDate":"2021-04-20T11:02:50Z","CommitHash":"60618210","Environment":"production","Version":"0.82.1"},"site":{"BaseURL":"https://coderyihaowang.github.io","Language":{"Lang":"en","LanguageName":"","LanguageDirection":"","Title":"","Weight":0,"Disabled":false,"ContentDir":"","Cfg":{}},"LastChange":"2021-04-27T23:06:31+12:00","Title":"Yihao"}}